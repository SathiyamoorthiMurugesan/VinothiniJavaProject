***********************************************
DAY 1 & 2

General things about Java

Project
	package1
		InterfaceA
		ClassA (variables/methods)
			ClassAA 
			ClassAB
		ClassB
		ClassC
	package2
		ClassA
		ClassB
	package3
		ClassX
		ClassA
		

* Class - It does a set of work. It consist of variables and methods

* Methods - It does speicific job. It always written insite a class

* Variable - it can have type(Data type) and posses a number or name;
			variables can have different access - access Modifier
			
* Access Modifier - difines where we can use a variable/method/class

* Interface - It contains rules most of the time. Sometimes it does some work too(means method).
			Interface is always followed by class/classes. 
			When class follows interface, class should do the rule written in the interface

* package - contains class/classes/interface/interfaces/file/files/folder/folders

* Project - consist of package/packages/file/files/folder/folders/source(src)folder

* static - static means belongs to the class. If govt hospital is class, then hospital receptionist is a static member of that class. We can not seperate them
			variables and methods can be static
			within a class - static can be used anywhere directly (in a static method or in non-static method)
			Outside calss - static can be used but alone with class name. (in a static method or in non-static method)

* Object - E.g: Medical camp; We create Object only for classes; Whenever we create object we copy whatever the class contains(except static)
			means, only non-static is copied
			Through object we can not call static things.

* Constructor - Object creation happens with the help of constructor
				constructor is available in different kind
				1. without any money/permission
				2. only with money
				3. only with permission
				4. with both money and permission
				
###############################################################################################
				
Class - important thing, through which we perform some task. Class may contains methods and variables

Method1 - A work
Method2 - B work
Method1 + method3 - C work ( A work + continuation)

Variables - shape and count
shape - datatype 


Datatype: Its a clasification of a data, which tells the compiler or interpretor about how the programmer intends to use the data.

1) Primitive
	a) boolean - yes or no
	b) Textual 
		char - a, b, c, A, B
		byte - 
			byte x = 10;
	c) numeric 
		int 
		short
		double
		long
		float

2) Non Primitive
	d) String 
	e) array
	
* default value of String is null
* default value of int is 0

int a = 10; 
int a;
String a = "10";
double a = 10d;
char sathya = 'c';

int a; - declare
a =10; - define/initiate

int a = 10;
int - data type( primitive --> numeric)
a - variable/variableName;
10 - value posses by the variable/ value pointed by the variable

Variables - Its a memory location that can hold values of a specific datatype.

Types of variables 
1. Local variable - 
	* defines within a method/constructor   -- {    }
	* scope of local variable is only within the block in which the variable is declared
	* intialization of local variable is madatory
	* local variables can not be static
	
	int a = 10;
	String sathya = "10";
	
2. Instance variable/class variable
	* Declared within a class but outside of a method
	* Non- static variables
	* To access instance variables, we need to create object
	
	int a = 10;
	String sathya = "10";
	
	
3. Static variable
	* Declared within a class but outside fo a method
	* static keyword is used with variables and methods
	* To access this variable, dont need to create an object
	
	static int a = 10;
	static String sathya = "10";
	
**************************************************************************************

DAY 3

Access Modifier
	* It defines where and who can use a method/variable/class
	1) default
	2) private
	3) protected
	4) public 
	
	int a = 10; - default (no need to mention "default" word
	private int a = 10;
	protected int a = 10;
	public int a = 10;
	
	
	packageA
		classA ( public int a = 10)
			ClassAA (same package and sub class of A)
		classB (same package but non sub class)
	packageX
		classX (diff package non sub class)
		classXA (diff package but sub class of A
		
	

                                     | default |  private  | protected  | public 
									 |         |           |            | 
	classA                           | yes     | yes       | yes        | yes
									 |         |           |            |
same package but sub class           | yes     | no        | yes        | yes
									 |         |           |            |
same package but non sub class       | yes     | no        | yes        | yes
									 |         |           |            |
different package but sub class      | no      | no        | yes        | yes
									 |         |           |            |
different package but non sub class  | no      | no        | no         | yes

***********************************************************************************************
DAY 3

JVM, JRE, JDK

our codes - english - .java
compile - .class - byte code (machine recognizable language)


JVM - Java Virtual Machine 
* This can not be seen
* it starts the execution
* It first checks for main method
* It creates the code flow, in java the flow is called "Thread" 
* JVM provides run time environment in which Java byte codes can be executed
* loads code| verifies code| execute code| provides run time environment

JRE - Java Runtime Environment
* Physically exist
* Contains JVM and set of libraries
* JVM uses these libraries to execute the codes

JDK - Java Developement kit
* It contains JVM, set of libraries and dev tools (JRE + dev tools)
* Used to develop and execute the codes
* Dev tools + debugger + compiler + java doc

--------------------------------------

What is eclipse

Its an editor to edit and view your project or project files
While writing itself, it will notify us about complilation errors

Its a user interface to view your project or file in a easy way

tab
drag and drop

* Perspective 
	Few of the perspectives in Eclipse
	* Java
	* Debug
	* Git


*****************************************************************************************

DAY 4

Maven

* Dependency Management tool
* we dont need to download any jar files(dependency).
* Group ID, Artifact ID and Version
* If we create a project with mavan as a dependency management tool, we get a proper project structure.
* Important file in maven project is pom.xml. In this file, we add dependency details 
* Dependencies will be stored in .m2 folder


Git 

We can store our project code in a proper structure. 
It will help us to reduce time and many people can work on a project at a same time 

upload project in Git

Steps to upload project in Git hub

1) Create a remote repository
2) In your system open git bash from your project location
3) enter below commands
	git init
	git add .
	git commit -m "any message you can type here"
	git remote add origin SSHURL
	git push origin master
	
	
	To view status:  git status 
	to clear lines: clear

****************************************************************
DAY 5

1. Created a maven project
2. Put project into git hub
3. But still its not a proper connection.. There is no git hub icon with the project. 
4. Also if you open the git perspective, you wont see your project details
5. In order to make proper connection, delete the project from your laptop (Because we already pushed project in git)


Java keywords
new, class, access modifiers, static, this, super, throw, throws, try, catch, final, finally, data type, 

Naming coversion in java
* Should not use above things
* homepage - homePage (Camel case)

If you are creating package, package name
* should start with small letter followed by camel case

if you are crreating class
* should start with Captial letter followed by camel case

thisIsPackageName 
ThisIsClassName
thisIsMethodName
ThisIsInterfaceName
thisIsObjectName or ThisIsObjectName
thisIsVariableName



Syntax

class 

accessModifer class className {

}

e.g: public class GovtHospital {

}


method 

accessModifer static/Non-static returnType nethodName() {

}

public void thisIsNonStaticMethod() {

}

public static void thisIsStaticMethod() {

}

Methods in Java

1) main method 
2) static method
3) non static method

With in a class
* calling static method from a static method - directly call
* calling static method from a non static method - directly call 

* calling non-static from a static method - Object creation
* calling non-static from a non static - Object creation/ directly call

***************************************************************************************************

DAY 6

Object creation

1) We create object only for class.
2) In order to access non static members of a class, we create object and access the methods and variables


Memory Management

Heap memory
Stack memory
SCP (String Constant Pool)

ClassA obj1 = new ClassA();

ClassA - Class Name
Obj1 - Object Name 
new = key word to create obj
ClassA() - Constructor or Object creation or instance creation

* Whenever we create an object for a class, whatever non-static variables and methods present in that class will be copied to heap memory
* Object varibale or instance variable, is stored in stack memory 


	stack memory			HEap me
	obj1				a = 10; method1();
	obj2				a = 10; method1();
	obj3				a = 10; method1(); 
	obj1ClassB			non static members 
	
int a = 10;
* a = 10 - it will be stored in stack memory

String Sathya = "1000"; String Literals
String Sathya = new String("1000"); Object creation

Sathya - Stack
1000 - SCP of Heap memory

String str = "Sathya";
String str1 = "Sathya";
String str2 = "Ranjith";

stack 		SCP
str			"Sathya" - 
str1 		
str2 		Ranjith

str1 = str1 + str2;
str1 = SathyaRanjith

str - Sathya - SathyaRanjith


stack 		SCP
str			"Sathya" - 
str1 		SathyaRanjith
str2 		Ranjith

str1 = str1+"abc"

stack 		SCP
str			"Sathya" - 
str1 		SathyaRanjithabc
str2 		Ranjith
			SathyaRanjith
			
String a = "new";
a = a+"10";
a = new10;

Immutable concept 
* It happens with String literals

Variables practice
	* local variable
	* class level variable or instance variable
	* static variable
	
Variable as a parameter

*************************************************************

DAY 7

Methods in Java
1) method without return type
2) method with return type
3) static method
4) non static method
5) parameterized method
6) Non parameterized method

























 


